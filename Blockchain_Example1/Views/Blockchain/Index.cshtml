@model IEnumerable<Blockchain_Example1.Models.Block>

@{
    ViewData["Title"] = "View";
}

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">RSA Private Key</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body modal-key overflow-auto" style="overflow-wrap: anywhere">
                @ViewBag.PrivateKey
            </div>
            <div class="modal-footer">
                <button id="copyKeyButton" type="button" class="btn btn-primary">Copy Key</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@if (ViewBag.IsValid)
{
    <div class="alert alert-success" role="alert">
        Blockchain validation status: @ViewBag.IsValid
    </div>
} else
{
    <div class="alert alert-danger" role="alert">
        Blockchain status: @ViewBag.IsValid
    </div>
}

<div class="alert alert-warning">
    Mining difficulty: @ViewBag.Difficulty
</div>

<div class="d-flex flex-row gap-3 my-3">
    <div class="shadow rounded p-4">
        <h4>Add block</h4>
        <form method="post" asp-action="Add" class="row g-3 align-items-center" id="addBlockForm">
            <div class="col-auto">
                <input type="text" name="data" id="data" placeholder="Enter block data" class="form-control" />
            </div>
            <div class="col-auto">
                <input type="text" name="signature" id="signature" placeholder="Enter private key" class="form-control" />
            </div>
            <div class="col-auto d-flex gap-2 align-items-center">
                <button type="submit" class="btn btn-primary">Add block</button>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                    Show Private Key
                </button>

                <div id="spinner-container" class="d-none ms-3">
                    <div class="spinner-border text-primary" role="status" style="width: 1.8rem; height: 1.8rem;">
                        <span class="visually-hidden">Mining...</span>
                    </div>
                </div>
            </div>
        </form>
    </div>


    <div class="shadow rounded p-4">
        <h4>Change mining difficulty</h4>
        <form method="post" asp-action="SetDifficulty" class="row">
            <div class="col-auto">
                <input type="number" name="difficulty" id="difficulty" placeholder="Enter difficulty" class="form-control"/>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Set</button>
            </div>
        </form>
    </div>
</div>

<div class="my-4 d-flex justify-content-center">
    <div class="shadow rounded p-4">
        <h4>Seach block (by index or hash)</h4>
        <form asp-action="Search" method="get" class="row"
              data-ajax="true" data-ajax-update="#Tabledata" data-ajax-mode="replace">
            <div class="col-auto text-center">
                <input type="text" name="query" id="query" placeholder="Enter index or hash" class="form-control" value=@ViewBag.CurrentFilter/>
            </div>
        </form>
    </div>
</div>

@await Html.PartialAsync("_BlockList", Model);

@section Scripts {
    <script src="~/lib/jquery.unobtrusive-ajax/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/lib/jquery/jquery.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const addForm = document.getElementById("addBlockForm");
            const spinner = document.getElementById("spinner-container");
            const dataInput = document.querySelector("#data");

            if (addForm && spinner) {
                addForm.addEventListener("submit", () => {
                    spinner.classList.remove("d-none");
                    setTimeout(() => {
                        dataInput.value = "";
                    }, 1500);
                });
            }

            const copyButton = document.getElementById("copyKeyButton");
            copyButton.addEventListener("click", () => {
                const keyText = document.querySelector(".modal-key").innerText.trim();

                navigator.clipboard.writeText(keyText).then(() => {
                    copyButton.textContent = "Copied!";
                    copyButton.classList.remove("btn-primary");
                    copyButton.classList.add("btn-success");

                    setTimeout(() => {
                        copyButton.textContent = "Copy Key";
                        copyButton.classList.remove("btn-success");
                        copyButton.classList.add("btn-primary");
                    }, 1500);
                }).catch(err => {
                    console.error("Clipboard copy failed:", err);
                    alert("Failed to copy key!");
                });
            });

        });

        var onComplete = function () {
            $("query").val('');
        };

        $('#query').on('keyup', function() {
                var query = $(this).val();
                $.get('@Url.Action("Search", "Blockchain")', { query: query }, function(data) {
                    $('#Tabledata').html(data);
                });
            });


        setInterval(() => {
            $.get('@Url.Action("Search", "Blockchain")', function(data) {
                $('#Tabledata').html(data);
            });
        }, 5000);
    </script>
}

