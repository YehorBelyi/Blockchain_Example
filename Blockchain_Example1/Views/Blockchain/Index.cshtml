@model IEnumerable<Blockchain_Example1.Models.Block>

@* Importing modals *@
@await Html.PartialAsync("Components/_PrivateKeyModal")
@await Html.PartialAsync("Components/_PublicKeyModal")
@await Html.PartialAsync("Components/_RegisterWalletModal")
@await Html.PartialAsync("Components/_MempoolModal")


@{
    ViewData["Title"] = "View";

}

@await Html.PartialAsync("Components/_ControlButtons")
@await Html.PartialAsync("Components/_WalletList")
@await Html.PartialAsync("Components/_Mempool")

@await Html.PartialAsync("Components/_InfoSection")
@await Html.PartialAsync("Components/_FormSection")
@await Html.PartialAsync("Components/_BlockList", Model)

@section Scripts {
    <script src="~/lib/jquery.unobtrusive-ajax/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/lib/jquery/jquery.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const addForm = document.getElementById("addBlockForm");
            const spinner = document.getElementById("spinner-container");
            const dataInput = document.querySelector("#data");

            if (addForm && spinner) {
                addForm.addEventListener("submit", () => {
                    spinner.classList.remove("d-none");
                    setTimeout(() => {
                        dataInput.value = "";
                    }, 1500);
                });
            }

            const copyButton = document.getElementById("copyKeyButton");
            copyButton.addEventListener("click", () => {
                const keyText = document.querySelector(".modal-key").innerText.trim();

                navigator.clipboard.writeText(keyText).then(() => {
                    copyButton.textContent = "Copied!";
                    copyButton.classList.remove("btn-primary");
                    copyButton.classList.add("btn-success");

                    setTimeout(() => {
                        copyButton.textContent = "Copy Key";
                        copyButton.classList.remove("btn-success");
                        copyButton.classList.add("btn-primary");
                    }, 1500);
                }).catch(err => {
                    console.error("Clipboard copy failed:", err);
                    alert("Failed to copy key!");
                });
            });

        });

        var onComplete = function () {
            $("query").val('');
        };

        $('#query').on('keyup', function() {
                var query = $(this).val();
                $.get('@Url.Action("Search", "Blockchain")', { query: query }, function(data) {
                    $('#Tabledata').html(data);
                });
            });


        setInterval(() => {
            $.get('@Url.Action("Search", "Blockchain")', function(data) {
                $('#Tabledata').html(data);
            });
        }, 5000);
    </script>
}

