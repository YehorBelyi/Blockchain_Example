@model IEnumerable<Blockchain_Example1.Models.Block>

@{
    ViewData["Title"] = "View";

    string shortenString(string s, int n = 10) => s.Length > 10 ? s.Substring(0, n) + "..." : s;
}

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">RSA Private Key</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body modal-key overflow-auto" style="overflow-wrap: anywhere">
                @ViewBag.PrivateKey
            </div>
            <div class="modal-footer">
                <button id="copyKeyButton" type="button" class="btn btn-primary">Copy Key</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="spinner-container"
     class="d-none position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50
            d-flex flex-column justify-content-center align-items-center"
     style="z-index: 1050;">
    <div class="spinner-border text-light" role="status" style="width: 4rem; height: 4rem;">
        <span class="visually-hidden">Mining in progress...</span>
    </div>
    <p class="mt-3 text-light fs-5 fw-semibold">Mining in progress...</p>
</div>

@if (ViewBag.IsValid)
{
    <div class="alert alert-success" role="alert">
        Blockchain validation status: @ViewBag.IsValid
    </div>
} else
{
    <div class="alert alert-danger" role="alert">
        Blockchain status: @ViewBag.IsValid
    </div>
}

<div class="alert alert-warning">
    Mining difficulty: @ViewBag.Difficulty
</div>

<div class="d-flex flex-row gap-3 my-3">
    <div class="shadow rounded p-4">
        <h4>Add block</h4>
        <form method="post" asp-action="Add" class="row" id="addBlockForm">
            <div class="col-auto">
                <input type="text" name="data" id="data" placeholder="Enter block data" class="form-control"/>
            </div>
            <div class="col-auto">
                <input type="text" name="signature" id="signature" placeholder="Enter private key" class="form-control" />
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Add block</button>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                    Show Private Key
                </button>
            </div>
        </form>
    </div>

    <div class="shadow rounded p-4">
        <h4>Change mining difficulty</h4>
        <form method="post" asp-action="SetDifficulty" class="row">
            <div class="col-auto">
                <input type="number" name="difficulty" id="difficulty" placeholder="Enter difficulty" class="form-control"/>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Set</button>
            </div>
        </form>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Nonce)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MiningDurationMs)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Index)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Data)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PreviousHash)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Hash)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Timestamp)
            </th>
            <th>@Html.DisplayNameFor(model => model.Signature)</th>
            <th>Signature validation</th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr class="@(ViewBag.ValidBlocks[item.Index] == true ? "table-success" : "table-danger")">
            <td>
                <span class="badge text-bg-primary">@Html.DisplayFor(modelItem => item.Nonce) atts</span>
            </td>
            <td>
                <span class="badge text-bg-secondary">@Html.DisplayFor(modelItem => item.MiningDurationMs) ms</span>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Index)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Data)
            </td>
            <td>
                @shortenString(item.PreviousHash)
            </td>
            <td>
                @shortenString(item.Hash)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Timestamp)
            </td>
            <td>
                @shortenString(item.Signature)
            </td>
            <td>
                    @if (ViewBag.SignatureValidity[item.Index] == true)
                    {
                        <span class="badge text-bg-success">Valid</span>
                    }
                    else
                    {
                        <span class="badge text-bg-danger">Invalid</span>
                    }
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Index }, new { @class = "btn btn-warning" })
                @* @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }, new { @class = "btn btn-secondary" })
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ }, new { @class = "btn btn-danger" }) *@
            </td>
        </tr>
}
    </tbody>
</table>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const addForm = document.getElementById("addBlockForm");
            const spinner = document.getElementById("spinner-container");

            if (addForm && spinner) {
                addForm.addEventListener("submit", () => {
                    spinner.classList.remove("d-none");
                });
            }

            const copyButton = document.getElementById("copyKeyButton");
            copyButton.addEventListener("click", () => {
                const keyText = document.querySelector(".modal-key").innerText.trim();

                navigator.clipboard.writeText(keyText).then(() => {
                    copyButton.textContent = "Copied!";
                    copyButton.classList.remove("btn-primary");
                    copyButton.classList.add("btn-success");

                    setTimeout(() => {
                        copyButton.textContent = "Copy Key";
                        copyButton.classList.remove("btn-success");
                        copyButton.classList.add("btn-primary");
                    }, 1500);
                }).catch(err => {
                    console.error("Clipboard copy failed:", err);
                    alert("Failed to copy key!");
                });
            });

        });


    </script>
}

